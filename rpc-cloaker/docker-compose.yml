version: '3.8'

services:
  # PostgreSQL + TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: rpc_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: rpc_cloaker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/src/database/timescale-schema.sql:/docker-entrypoint-initdb.d/02-timescale.sql
    ports:
      - "5432:5432"
    networks:
      - rpc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster Node 1
  redis-node-1:
    image: redis:7-alpine
    container_name: rpc_redis_1
    command: redis-server --port 7000 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7000:7000"
    volumes:
      - redis_data_1:/data
    networks:
      - rpc_network

  # Redis Cluster Node 2
  redis-node-2:
    image: redis:7-alpine
    container_name: rpc_redis_2
    command: redis-server --port 7001 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7001:7001"
    volumes:
      - redis_data_2:/data
    networks:
      - rpc_network

  # Redis Cluster Node 3
  redis-node-3:
    image: redis:7-alpine
    container_name: rpc_redis_3
    command: redis-server --port 7002 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7002:7002"
    volumes:
      - redis_data_3:/data
    networks:
      - rpc_network

  # Redis Cluster Setup
  redis-cluster-setup:
    image: redis:7-alpine
    container_name: rpc_redis_setup
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
    command: >
      sh -c "sleep 5 &&
             redis-cli --cluster create redis-node-1:7000 redis-node-2:7001 redis-node-3:7002 --cluster-replicas 0 --cluster-yes"
    networks:
      - rpc_network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rpc_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis-cluster-setup:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: rpc_cloaker
      DB_USER: postgres
      DB_PASSWORD: postgres123
      TIMESCALE_DB_NAME: rpc_cloaker
      REDIS_CLUSTER_NODES: redis-node-1:7000,redis-node-2:7001,redis-node-3:7002
      JWT_SECRET: your_super_secret_jwt_key_here_change_in_production
      ML_SERVICE_URL: http://ml-service:5000
      ML_SERVICE_API_KEY: ml_service_secret_key
    ports:
      - "3000:3000"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - rpc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ML Service (Isolated)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: rpc_ml_service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SERVICE_NAME: rpc-cloaker-ml
      SERVICE_PORT: 5000
      API_KEY: ml_service_secret_key
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/rpc_cloaker
      REDIS_URL: redis://redis-node-1:7000
      MODEL_PATH: /app/models
      MLFLOW_TRACKING_URI: file:///app/mlruns
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/mlruns:/app/mlruns
    networks:
      - rpc_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000/api
        VITE_WS_URL: ws://localhost:3000
    container_name: rpc_frontend
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - rpc_network

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: rpc_nginx
    depends_on:
      - backend
      - frontend
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "443:443"
    networks:
      - rpc_network
    profiles:
      - production

networks:
  rpc_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data_1:
  redis_data_2:
  redis_data_3: